import requests
import datetime
from datetime import datetime
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from forecast import *
from keyboards import *

tg_bot = Bot(token='5888133619:AAE1XW55jVt-pqpkXma1PcmoNGFK8m0v9eE')
dp = Dispatcher(tg_bot)

kb = InlineKeyboardMarkup
inline_btn_1 = InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ ..', callback_data='button_more')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)


@dp.message_handler(commands="start")
async def start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∞ —è –≤ –æ—Ç–≤–µ—Ç —Å–≤–æ–¥–∫—É –µ–≥–æ –ø–æ–≥–æ–¥—ã!")

@dp.message_handler()
async def show_weather(message: types.Message):

    try:
        response_weather_en = requests.get(
            url=f'http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid=0d863b433525d8e7bd171eb04e479015&units=metric').json()

        response_weather = requests.get(
            url=f'http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid=0d863b433525d8e7bd171eb04e479015&units=metric&lang=ru').json()
        # await message.reply(response_weather)

        icons_weather = {
            'Clear': '‚òÄ',
            'Clouds': '‚òÅ',
            'Fog': 'üå•',
            'Snow': 'üå®',
            'Rain': 'üåß',
            'Drizzle': 'üå¨',
            'Thunderstorm': '‚õà',

        }

        main_weather = response_weather['weather'][0]['main']
        if main_weather in icons_weather:
            icon_ = icons_weather[main_weather]
        else:
            icon_ = "–≤—ã–≥–ª—è–Ω–∏ –≤ –æ–∫–Ω–æ ‚ú®"

        global country_code, city_en, weather_more

        city_en = slugify(response_weather_en['name'])
        country_code = response_weather['sys']['country'].lower()

        city = response_weather['name']
        state = response_weather['weather'][0]['description']
        clouds = response_weather['clouds']['all']
        temp = response_weather['main']['temp']
        pressure = response_weather['main']['pressure']
        humidity = response_weather['main']['humidity']
        wind_speed = response_weather['wind']['speed']
        sunrise = datetime.fromtimestamp(response_weather['sys']['sunrise'])
        sunset = datetime.fromtimestamp(response_weather['sys']['sunset'])
        day_time = datetime.fromtimestamp(response_weather['sys']['sunset']) - datetime.fromtimestamp(response_weather['sys']['sunrise'])

        await message.reply(f'\U0001F682\U0001F682\U0001F682\U0001F682\U0001F682 {datetime.now().strftime("%d.%m.%Y %H:%M")} \U0001F682\U0001F682\U0001F682\U0001F682\U0001F682'
              f' \n–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} {icon_}: \n —Å–µ–π—á–∞—Å {state}, –Ω–µ–±–æ –∑–∞—Ç—è–Ω—É—Ç–æ –æ–±–ª–∞–∫–∞–º–∏ –Ω–∞ {clouds}%; \n —Ç–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: '
              f'{temp}¬∞C, –∞—Ç–º. –¥–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º —Ä—Ç. —Å—Ç.;  \n –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%, —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å; \n –≤—Ä–µ–º—è '
              f'–≤–æ—Å—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞: {sunrise.time()}, –∑–∞–∫–∞—Ç–∞: {sunset.time()}, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {day_time}.', reply_markup=inline_kb1)

        weather_more = forecast_show(country_code, city_en)

        # with open('weather.json', 'w') as file:
        #     json.dump(response_weather, file, indent=4, ensure_ascii=False)

    except Exception as _ex:
        await message.reply(str(_ex))
        await message.reply('‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ‚ùó')

@dp.callback_query_handler(lambda c: c.data == 'button_more')
async def process_callback_button1(callback_query: types.CallbackQuery):

    await tg_bot.answer_callback_query(callback_query.id)
    await tg_bot.send_message(callback_query.from_user.id, weather_more)

if __name__ == '__main__':
    executor.start_polling(dp)